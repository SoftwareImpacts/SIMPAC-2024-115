Driver:
	* Model components:
	  -Number of variable properties;
	  -Handles to VariableProperty objects;
		
	Tasks:
	  -Set initial variable properties values of particles and walls;
	  -Compute the NeighbourDistance according to the models assumed for the interactions (particle property): each model returns the required distance;
	   (also needs to update NeighbourDistance when particles are created/deleted)
	  -Virtual method to compute automatic time step according to mechanical or thermal formula (may need to be updated if particles are removed/created);
	  
	* Active particles loop (parallel): 		 
		-Properties update:
	     Check if particle has VariableProperty objects, if so, loop through them;
		 Loop through VariableProperty objects: call method to update the dependent variable of each VariableProperty object;
		 Update particle properties that dependends on the basic physical and geometric properties: area/volume, weight, thermal inertia, etc;
		 Update also some interaction properties that depend on the modified physical and geometric properties of the particles;
		 (in fact, some interaction properties are stored to avoid re-computation, but they must be re-computed when the basic physical and geometric properties are changed)

------------------------------------------------------------------------------------------------------------------------------------------------
VariableProperty:
	Properties:
	* Name;
	* DependentVariable;
	* IndependentVariable;
	* TableOfValuesXY;
	* UpdateFrequency; (default: 1)
	* Interval; (default: [0,inf])
	
	Tasks:
	* Each object can serve to multiple particles (same as material);
	* Method to return the dependent variable value, given the independent variable value - DVal = GetValue(IVal);
	* Method to make a linear interpolation between the table values;
	* Method to update the dependent variable:
	  checks if its time to update (according to interval and frequency),
	  gets a copy of the dependent variable using a switch between the options,
	  updates the dependent variable value according to the table and to the independent variable (must have access to independent variable: temperature, time,...);

------------------------------------------------------------------------------------------------------------------------------------------------
Search_RestrictedLoop: (Vervlet list)
	Properties:
	* SearchRadius;
	* AutoUpdateFrequency; (needs a method to compute ompute the automatic update frequency of the search zone)
	* SearchListUpdateFrequency;
	
	Tasks:
	* Implementation of the virtual method to perform the algorithm:
	  -Check if it is time to update the search list, if so, call method to do it (method similar to simple_loop):
	   -> Loop through all active particles in parallel;
	   -> Clean particle search list;
	   -> Sub-loop through all other active particles and walls;
	   -> Check if distance is smaller than SearchRadius (maximum of both particle), if so, add element to the list;

	  -Check if it is time to perform the search, if so, call method to do it: (if list update has been performed, both can be done in the same loop)
	   -> Loop through all active particles in parallel;
	   -> Sub-loop through the particles of the search list with higher ID number, and active walls;
	   -> Check if there exist an Interact object (search in PPInteractionTable and PWInteractionTable):
	      No:  If distance is smaller than NeighbourDistance, create a new Interact object for the binary interaction;
	      Yes: If distance is greater than NeighbourDistance, delete object;
	   -> If object is to be created, add a handle to it in the list of interactions of the driver and both involved elements;
	   -> If object is to be deleted, remove the handle to it in the list of interactions of the driver and both involved elements;

------------------------------------------------------------------------------------------------------------------------------------------------
Particle:
	Properties:
	* Variable properties:
	  -Handles to VariableProperty objects;
	
	* Neighbours Interactions:
	  -NeighbourDistance;
	
------------------------------------------------------------------------------------------------------------------------------------------------
Interact:
	Properties:
	* Interaction models:
	  -ContactTorque;
	  -ContactAreaCorrectionMethod;
	  -NonContactThermalConduction;
	  -ThermalRadiation;
	
	* Contact information:
	  -AdjustedContactArea;

------------------------------------------------------------------------------------------------------------------------------------------------
ContactForceNormal_DiskDisk_LinearViscoElastic:
	Properties:
	* ElasticForceValue;
	* ViscousForceValue;
	* StiffFormulation; (none,time,overlap,energy)
	* StiffCoeffFactor;
	* StiffCoeffValue;
	* DampFormulation; (none,analytical)
	* DampCoeffFactor;
	* DampCoeffValue;
	* RemoveArtificialCohesion;
	
	Tasks:
	* Implementation of virtual method to evaluate contact normal force: Elastic+Viscous;
	* Methods to compute stiffness with equivalency formulas: time, overlap, and energy;
	* Method to compute damping with analytical formula;

ContactForceNormal_DiskDisk_NonlinearViscoElastic:
	Properties:
	* ElasticForceFormulation;
	* ElasticForceValue;
	* ViscousForceFormulation;
	* ViscousForceValue;
	* DampFormulationTTI; (none,proposed)
	* DampCoeffFactor;
	* DampCoeffValue;
	* RemoveArtificialCohesion;
	
	Tasks:
	* Implementation of virtual method to evaluate contact normal force: Elastic+Viscous;
	* Method to compute elastic force with Hertz formula;
	* Methods to compute viscous force with formulas: TTI, KK;
	* Method to compute damping for TTI with proposed formula;

ContactForceNormal_DiskDisk_LinearElastoPlastic:
	Properties:
	* LoadingStiffFormulation; (none,time,overlap,energy)
	* LoadingStiffCoeffFactor;
	* LoadingStiffCoeffValue;
	* UnloadingStiffFormulation; (none,uniform,variable)
	* UnloadingStiffVariableParam;
	* UnloadingStiffCoeffFactor;
	* UnloadingStiffCoeffValue;
	* MaxNormalForce;
	
	Tasks:
	* Implementation of virtual method to evaluate contact normal force;
	* Methods to compute loading stiffness with equivalency formulas: time, overlap, and energy;
	* Methods to compute unloading stiffness with formulas: uniform, variable;

------------------------------------------------------------------------------------------------------------------------------------------------
ContactForceTangent_DiskDisk_Dashpot:
	Properties:
	* DampCoeff;
	
	Tasks:
	* Implementation of virtual method to evaluate contact tangent force;

ContactForceTangent_DiskDisk_Slider:
	Properties:
	* FrictionCoeff;
	
	Tasks:
	* Implementation of virtual method to evaluate contact tangent force;

ContactForceTangent_DiskDisk_SpringSlider:
	Properties:
	* SpringCoeff;
	* FrictionCoeff;
	
	Tasks:
	* Implementation of virtual method to evaluate contact tangent force;

ContactForceTangent_DiskDisk_DashpotSlider:
	Properties:
	* DampCoeff;
	* FrictionCoeff;
	
	Tasks:
	* Implementation of virtual method to evaluate contact tangent force;

ContactForceTangent_DiskDisk_SpringDashpotSlider:
	Properties:
	* SpringCoeff;
	* DampCoeff;
	* FrictionCoeff;
	
	Tasks:
	* Implementation of virtual method to evaluate contact tangent force;

------------------------------------------------------------------------------------------------------------------------------------------------
ContactTorque: (Super)
	Properties:
	* Torque;
	
	Tasks:
	* General virtual method to evaluate contact torque;

ContactTorque_DiskDisk:
	Tasks:
	* Implementation of virtual method to evaluate contact torque;
	* Method to compute torque due to tangent force;

------------------------------------------------------------------------------------------------------------------------------------------------
ContactConduction_DiskDisk_ThermalPipe:
	Properties:
	* ...
	
	Tasks:
	* Implementation of virtual method to evaluate contact thermal conduction;

NonContactConduction: (Super)
	Properties:
	* ThermalConduction;
	
	Tasks:
	* General virtual method to evaluate noncontact thermal conduction;

NonContactConduction_DiskDisk_VoronoiA:
	Properties:
	* ...
	
	Tasks:
	* Implementation of virtual method to evaluate noncontact thermal conduction;

------------------------------------------------------------------------------------------------------------------------------------------------
ContactAreaCorrection: (Super)
	Tasks:
	* General virtual method to compute adjusted contact area;

ContactAreaCorrection_ZYZ:
	Properties:
	* ...
	
	Tasks:
	* Implementation of virtual method to compute adjusted contact area;

ContactAreaCorrection_LMLB:
	Properties:
	* ...
	
	Tasks:
	* Implementation of virtual method to compute adjusted contact area;

ContactAreaCorrection_MPMH:
	Properties:
	* ...
	
	Tasks:
	* Implementation of virtual method to compute adjusted contact area;
