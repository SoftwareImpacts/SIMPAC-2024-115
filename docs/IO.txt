* MechanicalInteractionModels: (multiple)
Check the maximum radius to search for neighbours according to all selected models;
	-Name: string;
	-NormalContactForce:
		-> Model: string;
		-> (viscoelastic_linear) StiffCoeffFactor: double; (default: 1 - free factor to multiply the formula)
		-> (viscoelastic_linear) StiffCoeffValue: double; (in case formula is none - default: 0.0)
		-> (viscoelastic_linear) AutoDampingCoeff: true/false; (default: true - use the analytic formula)
		-> (viscoelastic_linear) DampingCoeffFactor: double; (default: 1 - free factor to multiply the automatic coeff)
		-> (viscoelastic_linear) DampingCoeffValue: double; (in case automatic factor is false - default: 0.0)
		-> (viscoelastic_nonlinear) ElasticForceModel: string; (default: hertz)
		-> (viscoelastic_nonlinear) ViscousForceModel: string; (none,default:TTI,KK)
		-> (viscoelastic_nonlinear,TTI) AutoDampingCoeff: true/false; (default: true - use the proposed formula)
		-> (viscoelastic_nonlinear,TTI) DampingCoeffFactor: double; (default: 1 - free factor to multiply the automatic coeff)
		-> (viscoelastic_nonlinear,TTI) DampingCoeffValue: double; (in case automatic factor is false - default: 0.0)
		-> (viscoelastic_nonlinear,KK) DampingCoeffValue: double; (default: 0.0)
		-> (viscoelastic_nonlinear) RemoveArtificialCohesion: true/false; (default: true)
		-> (elastoplastic_linear) LoadingStiffCoeffFormula: string; (none,time,overlap,energy)
		-> (elastoplastic_linear) LoadingStiffCoeffFactor: double; (default: 1 - free factor to multiply the formula)
		-> (elastoplastic_linear) LoadingStiffCoeffValue: double; (in case formula is none - default: 0.0)
		-> (elastoplastic_linear) AutoUnloadingStiffCoeff: true/false; (default: true - from restitution coefficient)
		-> (elastoplastic_linear) UnloadingStiffCoeffType: string; (constant,variable - in case automatic factor is true)
		-> (elastoplastic_linear,variable) UnloadingStiffCoeffParam: double;
		-> (elastoplastic_linear) UnloadingStiffCoeffFactor: double; (default: 1 - free factor to multiply the automatic coeff)
		-> (elastoplastic_linear) UnloadingStiffCoeffValue: double; (in case automatic factor is false - default: 0.0)
	-TangentialContactForce:
		-> Model: string;
		-> (simple_spring)  SpringCoeff: double;
		-> (simple_dashpot) DampingCoeff: double;
		-> (simple_slider)  FrictionCoeff: double;
		-> (spring_slider)  SpringCoeff: double;
		-> (spring_slider)  FrictionCoeff: double;
		-> (dashpot_slider) DampingCoeff: double;
		-> (dashpot_slider) FrictionCoeff: double;
		-> (spring_dashpot_slider) SpringCoeff: double;
		-> (spring_dashpot_slider) DampingCoeff: double;
		-> (spring_dashpot_slider) FrictionCoeff: double;
	-RollingResistance:
		-> Model: string; (default: none)

* ThermalInteractionModels: (multiple)
	-Name: string;
	-DirectConduction:
		-> Model: string; (pipe,BOB,ZYH,BOB_ZYH)
		-> ContactAreaCorrection: string; (default:none,ZYZ,LMLB,MPMH)
	-IndirectConduction:
		-> Model: string; (default:none,voronoi_A,voronoi_B,surrounding_layer)
	-Radiation:
		-> Model: string; (default: none)
	-Friction:
		-> Model: string; (default: none)

* InteractionModelsAssignment: (multiple)
All particles should have their interactions with all other elements defined (missing interaction definitions results in a warning);
Multiple mechanical or thermal models can be set to the same particle, as long as they do not redefine a type of formulation already defined (first definition is kept);
Best strategy is to sel a standar interaction to all and then set each one individually;
	-ModelParts: [string,string]; (keyword: All, to set for all interactions)
	-MechanicalInteractionModel: string;
	-ThermalInteractionModel: string;

* Results:
OutputFrequency is used for all transient responses (animation,graph,paraview,text);
TextFile is created in individual files in a new folder;
	-OutputFrequencyStep: int;
	-OutputFrequencYTime: double;
	-MatlabAnimation:
		-> Title: string;
		-> Result: string; (position,orientation,velocity,acceleration,temperature)
	-MatlabGraph: (multiple)
		-> Title: string;
		-> XAxis: string; (time)
		-> YAxis: string; (position,orientation,velocity,acceleration,temperature)
		-> Particles: [ints];
	-MatlabPicture: (multiple)
		-> Result: string; (position,orientation,velocity,acceleration,temperature)
		-> Time: double;
		-> Step: double;
	-Paraview:
		-> 
	-TextFile:
		-> 
