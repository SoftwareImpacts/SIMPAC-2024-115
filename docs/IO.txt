ModelParts.txt
The geometric properties (e.g. Radius) are optional;
If the geometric properties are not set here, it must be set through the GeometryProperties of the ProjectParameters file;
If a particle is not set a geometric property, an error occurs;
If a geometric property is re-set in the GeometryProperties of the ProjectParameters file, a warning is issued an the latest value is kept;

===================================================================================================
ProjectParameters.json
Note: Always when a property is re-assigned to a particle, the last one is kept (a warning can be issued, if necessary);

* CreationDestruction:
Only one creator/destructor time is allowed per element, otherwise a warining is issued;
A warning is issued for inconsistent creation/destruction times (creation after it is deleted and vsvc);
Source creates particles in a given frequency (one particle at a given time), in a randon position/orientation inside the source line/area (with the conditions of the assigned model part);
CheckOverlaps will make search to a assure that the created particle will not have an overlap, otherwise it is created in another position;

	-Creator: (multiple)
		-> ModelPart: string;
		-> CreationTime: double;
	-Destructor: (multiple)
		-> ModelPart: string;
		-> DestructionTime: double;
	-Source: (multiple)
		-> Shape: string; (line,box,sphere)
		-> Point1 (for line): [double,double,double];
		-> Point2 (for line): [double,double,double];
		-> MinLimits (for box): [double,double,double];
		-> MaxLimits (for box): [double,double,double];
		-> Center (for sphere): [double,double,double];
		-> Radius (for sphere): double;
		-> GenerationRate: double;
		-> CheckOverlaps: true/false; (default: true)
		-> ModelPart: string;
		-> Interval: [double,double]; (default: [0.0,inf])

* FixedConditions:
Multiple sets of each F.C. can be applied;
If a F.C. is applied to a particle together with an equivalent I.C., a warning is issued and the B.C. is kept (a particle cannot be created with a value of a variable and, at the same time, this value is set to another one);
Intervals of fixed motion can be overlaped for the same element, and the contributions are summed;
Intervals of fixed heat flux can be overlaped for the same element, and the contributions are summed;
Intervals of fixed temperature cannot be overlaped for the same element either with other fixed temperature nor with fixed heat flux;
A particle is mechanically fixed if any of its motion components (translational or rotational) is fixed, otherwise its mechanically free;
A particle is thermally fixed if its temperature or heat flux is fixed (EBC and NBC respectively), otherwise its thermally free;
The temperature evolution of particles with fixed heat flux is not considered and it is kept constant during the interval;
The heat flux of particles with fixed temperature are not computed and will not be shown;
Outside the fixed motion interval, a particle is mechanically free and behaves normally, keeping the last velocity and acceleration;
Outside the fixed motion interval, a wall is static;
Outside the fixed temperature or heat flux interval, a particle is thermally free and behaves normally, keeping the last temperature;
Outside the fixed thermal interval, a wall keeps the last temperature;
Remember that not assign temperature are always assumed as zero, so it should be always assinged to particles and walls, at least the initial;
The fixed motion starts from the position/orientation of elements at the beginning of the interval;

	FixedTranslationalMotion:
		-Type: string; (uniform_velocity,uniform_acceleration,oscillatory,circular)
		-Interval: [double,double];  (default: [0.0,inf])
		-ModelParts: [strings];
		Uniform parameters:
			-Value: [double,double,double];
		Oscillatory parameters:
			-Amplitude: [double,double,double];
			-Phase: [double,double,double];
			-Period: [double,double,double];
		Circular parameters:
			-Center: [double,double,double];
			-Orientation: [double,double]; (ignored in 2D)
			-Radius: double;
			-Period: double;

	FixedRotationalMotion:
		-Type: string; (uniform_velocity,uniform_acceleration,oscillatory)
		-Interval: [double,double];  (default: [0.0,inf])
		-ModelParts: [strings];
		Uniform parameters:
			-Value: [double,double,double];
		Oscillatory parameters:
			-Amplitude: [double,double,double];
			-Phase: [double,double,double];
			-Period: [double,double,double];

	FixedTemperature:
		-Type: string; (uniform,linear,oscillatory)
		-Interval: [double,double];  (default: [0.0,inf])
		-ModelParts: [strings];
		Uniform parameters:
			-Value: double;
		Linear parameters (T=at+b):
			-Initial: double; (can be initialized from the current value at the beginning of the interval)
			-Slope: double;
		Oscillatory parameters:
			-Initial: double; (can be initialized from the current value at the beginning of the interval)
			-Amplitude: double;
			-Phase: double;
			-Period: double;

	FixedHeatFlux:
		-Type: string; (uniform,linear,oscillatory)
		-Interval: [double,double];  (default: [0.0,inf])
		-ModelParts: [strings];
		Uniform parameters:
			-Value: double;
		Linear parameters (q=at+b):
			-Initial: double;
			-Slope: double;
		Oscillatory parameters:
			-Initial: double;
			-Amplitude: double;
			-Phase: double;
			-Period: double;

* PrescribedConditions:
Apply only to mechanically/thermally free particles;

* GlobalConditions:
Applied to all particles;
Global damping is the damping coeff that multiplies the velocity component to give a global viscous force (in adition to the contact one);
	GlobalDampingTranslational: [double,double,double];
	GlobalDampingRotational: [double,double,double];

* Materials: (multiple)
The name of a VariableProperties can be set to any material property;

* GeometricProperties: (multiple)
Geometric properties are only assigned to particles;
All particle must have one assigned geometry (through the model part file or here), otherwise a warning/error is issued;
If a property required by a model is missing, an error is issued;
The name of a VariableProperties can be set to any material property;
If VariableProperties_name has the same name of one of the distribution names, what to do? (reserve the name?)
Before analysis start, the value of a property must be set according to the VariableProperties;
	-ModelParts: [strings];
	-Properties: (for Disk and Sphere)
		-> RadiusDistribution: string; (uniform,linear_random,normal_random,VariableProperties_name)
		-> (uniform) RadiusValue: double;
		-> (linear_random) RadiusRange: double;
		-> (normal_random) MiddleValue: double;
		
* MechanicalInteractionModels: (multiple)
	-Name: string;
	-NormalContactForce:
		-> Model: string;
		-> (viscoelastic_linear) StiffCoeffFormula: string; (none,time,overlap,energy)
		-> (viscoelastic_linear) StiffCoeffFactor: double; (default: 1 - free factor to multiply the formula)
		-> (viscoelastic_linear) StiffCoeffValue: double; (in case formula is none - default: 0.0)
		-> (viscoelastic_linear) AutoDampingCoeff: true/false; (default: true - use the analytic formula)
		-> (viscoelastic_linear) DampingCoeffFactor: double; (default: 1 - free factor to multiply the automatic coeff)
		-> (viscoelastic_linear) DampingCoeffValue: double; (in case automatic factor is false - default: 0.0)
		-> (viscoelastic_linear) RemoveArtificialCohesion: true/false; (default: true)
		-> (viscoelastic_nonlinear) ElasticForceModel: string; (default: hertz)
		-> (viscoelastic_nonlinear) ViscousForceModel: string; (none,default:TTI,KK)
		-> (viscoelastic_nonlinear,TTI) AutoDampingCoeff: true/false; (default: true - use the proposed formula)
		-> (viscoelastic_nonlinear,TTI) DampingCoeffFactor: double; (default: 1 - free factor to multiply the automatic coeff)
		-> (viscoelastic_nonlinear,TTI) DampingCoeffValue: double; (in case automatic factor is false - default: 0.0)
		-> (viscoelastic_nonlinear,KK) DampingCoeffValue: double; (default: 0.0)
		-> (viscoelastic_nonlinear) RemoveArtificialCohesion: true/false; (default: true)
		-> (elastoplastic_linear) LoadingStiffCoeffFormula: string; (none,time,overlap,energy)
		-> (elastoplastic_linear) LoadingStiffCoeffFactor: double; (default: 1 - free factor to multiply the formula)
		-> (elastoplastic_linear) LoadingStiffCoeffValue: double; (in case formula is none - default: 0.0)
		-> (elastoplastic_linear) AutoUnloadingStiffCoeff: true/false; (default: true - from restitution coefficient)
		-> (elastoplastic_linear) UnloadingStiffCoeffType: string; (constant,variable - in case automatic factor is true)
		-> (elastoplastic_linear,variable) UnloadingStiffCoeffParam: double;
		-> (elastoplastic_linear) UnloadingStiffCoeffFactor: double; (default: 1 - free factor to multiply the automatic coeff)
		-> (elastoplastic_linear) UnloadingStiffCoeffValue: double; (in case automatic factor is false - default: 0.0)
	-TangentialContactForce:
		-> Model: string;
		-> (simple_spring)  SpringCoeff: double;
		-> (simple_dashpot) DampingCoeff: double;
		-> (simple_slider)  FrictionCoeff: double;
		-> (spring_slider)  SpringCoeff: double;
		-> (spring_slider)  FrictionCoeff: double;
		-> (dashpot_slider) DampingCoeff: double;
		-> (dashpot_slider) FrictionCoeff: double;
		-> (spring_dashpot_slider) SpringCoeff: double;
		-> (spring_dashpot_slider) DampingCoeff: double;
		-> (spring_dashpot_slider) FrictionCoeff: double;
	-RollingResistance:
		-> Model: string; (default: none)

* ThermalInteractionModels: (multiple)
	-Name: string;
	-DirectConduction:
		-> Model: string; (pipe,BOB,ZYH,BOB_ZYH)
		-> ContactAreaCorrection: string; (default:none,ZYZ,LMLB,MPMH)
	-IndirectConduction:
		-> Model: string; (default:none,voronoi_A,voronoi_B,surrounding_layer)
	-Radiation:
		-> Model: string; (default: none)
	-Friction:
		-> Model: string; (default: none)

* InteractionModelsAssignment: (multiple)
All particles should have their interactions with all other elements defined (missing interaction definitions results in a warning);
Multiple mechanical or thermal models can be set to the same particle, as long as they do not redefine a type of formulation already defined (first definition is kept);
Best strategy is to sel a standar interaction to all and then set each one individually;
	-ModelParts: [string,string]; (keyword: All, to set for all interactions)
	-MechanicalInteractionModel: string;
	-ThermalInteractionModel: string;

* VariableProperties: (multiple)
Before analysis start, the value of a property must be set according to the VariableProperties;
When created by the Materials/GeometricProperties, the ModelParts is ignored;
When created by the Materials/GeometricProperties, the DependentVariable must be in accrodance (or ignored);
ModelParts and DependentVariable are set in the constructor when creating the VariableProperties when reading materials/GeometricProperties;
VariableProperties are objects that serve to multiple particles;
A check must be made to make sure that the same property is not being set twice;
	-Name: string;
	-ModelParts: [strings];
	-DependentVariable: string; (geometric and material properties)
	-IndependentVariable: string; (time,temperature...)
	-UpdateFrequency: int; (default: 1)
	-Interval: [double,double]; (default: [0.0,inf])
	-Table: table with X,Y values;
	-TableFile: string;

* Solver:
Automatic time step is calculated based on the formulas for critical time step of the mechanical and thermal problems, considering the limiting case;

* Search:
restricted_loop method: area around each particle to search for contacts - each particle stores the IDs of other particles within the radius (updated in a given frequency);
AutomaticUpdateFrequency computes a number of steps for updating the particles list inside the restricted area based on the maximum velocity of a particle in the model and the time it would take to enter the area a reach the neighbohood of a particle;
	-NeighbourSearchRadius (for restricted_loop): double;
	-AutoUpdateFrequency (for restricted_loop): true/false (default: true)
	-SearchListUpdateFrequency (for restricted_loop): int; (default: 1)

* Results:
TextFile is created in individual files in a new folder;
	-MatlabPicture: (multiple)
		-> Result: string; (position,orientation,velocity,acceleration,temperature)
		-> Time: double;
		-> Step: double;